using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics.Eventing.Reader;

namespace Moriarty.Msrc
{
    public class CVE_2021_26858 : IVulnerabilityCheck
    {
        private const string Id = "CVE-2021-26858";
        private static readonly string[] Exploits = new[]
        {
            "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-26858"
        };

        public Vulnerability GetVulnerability()
        {
            return new Vulnerability(Id, Exploits);
        }

        public void Check(VulnerabilityCollection vulnerabilities, int buildNumber, List<int> installedKBs)
        {
            DebugUtility.DebugPrint("Running CVE-2021-26858 checks...");

            string outputPathCsv = Path.Combine(Environment.GetEnvironmentVariable("SystemRoot"), "temp", Environment.MachineName + "-exch", "UnifiedMessaging.csv");
            string outputPathTxt = Path.Combine(Environment.GetEnvironmentVariable("SystemRoot"), "temp", Environment.MachineName + "-exch", "UnifiedMessaging.txt");
            Directory.CreateDirectory(Path.GetDirectoryName(outputPathCsv));

            try
            {
                var query = "*[System[Provider[@Name='MSExchange Unified Messaging'] and (Level=2)]]";
                var logs = new EventLogQuery("Application", PathType.LogName, query);
                using (var reader = new EventLogReader(logs))
                {
                    List<EventRecord> suspiciousLogs = new List<EventRecord>();
                    EventRecord eventInstance;
                    while ((eventInstance = reader.ReadEvent()) != null)
                    {
                        using (eventInstance)
                        {
                            if (eventInstance.FormatDescription().Contains("System.InvalidCastException"))
                            {
                                suspiciousLogs.Add(eventInstance);
                            }
                        }
                    }

                    if (suspiciousLogs.Any())
                    {
                        // Convert to CSV format and export
                        var csvLines = suspiciousLogs.Select(log => $"{log.TimeCreated},{log.Id},{log.FormatDescription().Replace(Environment.NewLine, "; ")}");
                        File.WriteAllLines(outputPathCsv, csvLines);
                        DebugUtility.DebugPrint($"Suspicious data in MSExchange Unified Messaging Logs. See {outputPathCsv} for details.");
                    }
                    else
                    {
                        File.WriteAllText(outputPathTxt, "No Applicable MSExchange Unified Messaging Logs Exist");
                        DebugUtility.DebugPrint("No Applicable MSExchange Unified Messaging Logs Exist");
                    }
                }
            }
            catch (EventLogNotFoundException ex)
            {
                File.WriteAllText(outputPathTxt, "No Applicable Event Logs Exist");
                DebugUtility.DebugPrint("No Applicable MSExchange Unified Messaging Logs Exist");
            }
        }
    }
}
