using System;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Text.RegularExpressions;

namespace Moriarty.Msrc
{
    internal static class CVE_2021_44228
    {
        private const string Id = "CVE-2021-44228";
        private static readonly string[] Exploits = new[]
        {
            "https://github.com/CERTCC/CVE-2021-44228_scanner"  // URL for reference
        };

        public static Vulnerability GetVulnerability()
        {
            return new Vulnerability(Id, Exploits);
        }

        public static void Check(VulnerabilityCollection vulnerabilities)
        {
            string topLevel = Directory.GetCurrentDirectory();
            ScanDirectory(topLevel, vulnerabilities);
        }

        private static void ScanDirectory(string directoryPath, VulnerabilityCollection vulnerabilities)
        {
            var fileExtensions = new[] { ".jar", ".war", ".ear", ".zip" };
            var files = Directory.GetFiles(directoryPath, "*.*", SearchOption.AllDirectories)
                                 .Where(file => fileExtensions.Any(x => file.EndsWith(x, StringComparison.OrdinalIgnoreCase)));

            foreach (var file in files)
            {
                ProcessFile(file, vulnerabilities);
            }
        }

        private static void ProcessFile(string filePath, VulnerabilityCollection vulnerabilities)
        {
            using (ZipArchive archive = ZipFile.OpenRead(filePath))
            {
                foreach (ZipArchiveEntry entry in archive.Entries)
                {
                    if (entry.FullName.EndsWith("JndiLookup.class", StringComparison.OrdinalIgnoreCase))
                    {
                        CheckForVulnerability(entry, filePath, vulnerabilities);
                    }
                    else if (IsArchive(entry.FullName))
                    {
                        string tempPath = Path.GetTempFileName();
                        entry.ExtractToFile(tempPath, true);
                        ProcessFile(tempPath, vulnerabilities);
                        File.Delete(tempPath);
                    }
                }
            }
        }

        private static bool IsArchive(string fileName)
        {
            var archiveExtensions = new[] { ".jar", ".war", ".ear", ".zip" };
            return archiveExtensions.Any(ext => fileName.EndsWith(ext, StringComparison.OrdinalIgnoreCase));
        }

        private static void CheckForVulnerability(ZipArchiveEntry entry, string originalFilePath, VulnerabilityCollection vulnerabilities)
        {
            string tempPath = Path.GetTempFileName();
            entry.ExtractToFile(tempPath, true);
            string fileContent = File.ReadAllText(tempPath);

            if (Regex.IsMatch(fileContent, "LogEvent") && !Regex.IsMatch(fileContent, "JNDI is not supported"))
            {
                DebugUtility.DebugPrint($"Vulnerability found in {originalFilePath} -> {entry.FullName}");
                vulnerabilities.SetAsVulnerable(Id);
            }

            File.Delete(tempPath);
        }
    }
}
