using System;
using System.Collections.Generic;
using System.IO;
using System.Security.AccessControl;
using System.Security.Principal;

namespace Moriarty.Msrc
{
    public class CVE_2021_36934 : IVulnerabilityCheck
    {
        private const string Id = "CVE-2021-36934";
        private static readonly string[] Exploits = new[]
        {
            "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-36934"
        };

        public Vulnerability GetVulnerability()
        {
            return new Vulnerability(Id, Exploits);
        }

        public void Check(VulnerabilityCollection vulnerabilities, int buildNumber, List<int> installedKBs)
        {
            DebugUtility.DebugPrint("Running CVE-2021-36934 (HiveNightmare) vulnerability checks...");
            string[] hiveFiles = { "SAM", "SYSTEM", "SECURITY" };
            var systemConfigPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Windows), "System32", "config");
            var vulnerableACL = "BUILTIN\\Users";

            bool isVulnerable = false;

            foreach (var hiveFile in hiveFiles)
            {
                var filePath = Path.Combine(systemConfigPath, hiveFile);
                if (CheckFileACL(filePath, vulnerableACL))
                {
                    DebugUtility.DebugPrint($"Detected improper {hiveFile} hive permissions - System may be vulnerable");
                    isVulnerable = true;
                }
            }

            if (isVulnerable)
            {
                DebugUtility.DebugPrint("System may be vulnerable to CVE-2021-36934");
                vulnerabilities.SetAsVulnerable(Id);
            }
            else
            {
                DebugUtility.DebugPrint("System not vulnerable to CVE-2021-36934");
            }
        }

        private bool CheckFileACL(string filePath, string vulnerableACL)
        {
            if (!File.Exists(filePath))
            {
                return false;
            }

            var fileSecurity = File.GetAccessControl(filePath);
            var accessRules = fileSecurity.GetAccessRules(true, true, typeof(NTAccount));

            foreach (FileSystemAccessRule rule in accessRules)
            {
                if (rule.IdentityReference.Value.Equals(vulnerableACL, StringComparison.OrdinalIgnoreCase) &&
                    rule.FileSystemRights.HasFlag(FileSystemRights.Read))
                {
                    return true; // Detected vulnerable ACL
                }
            }

            return false;
        }
    }
}
