using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Moriarty.Msrc;

namespace Moriarty
{
    public class VulnerabilityCollection
    {
        private readonly List<Vulnerability> _vulnerabilities;

        public VulnerabilityCollection()
        {
            _vulnerabilities = Populate();
        }

        public void SetAsVulnerable(string id)
        {
            var vulnerability = _vulnerabilities.FirstOrDefault(e => e.Identification == id);
            if (vulnerability != null)
            {
                vulnerability.SetAsVulnerable();
            }
        }

        public void ShowResults()
        {
            var vulnerableItems = _vulnerabilities.Where(i => i.Vulnerable).ToList();
            foreach (var vuln in vulnerableItems)
            {
                Console.WriteLine($" [+] {vuln.Identification} : VULNERABLE");
                foreach (var exploit in vuln.KnownExploits)
                {
                    Console.WriteLine($"  [>] {exploit}");
                }
                Console.WriteLine();
            }

            int totalVulnerabilities = _vulnerabilities.Count;
            int foundVulnerabilities = vulnerableItems.Count;

            Console.WriteLine($" [*] Vulnerabilities found: {foundVulnerabilities}/{totalVulnerabilities}");
            Console.WriteLine($" [+] Scan Complete!\r\n");
        }
        public List<Vulnerability> GetAllVulnerabilities()
        {
            return _vulnerabilities;
        }

        private List<Vulnerability> Populate()
        {
            var vulnerabilityTypes = Assembly.GetExecutingAssembly()
                                             .GetTypes()
                                             .Where(t => t.Namespace == "Moriarty.Msrc"
                                                         && t.GetMethod("GetVulnerability") != null
                                                         && t.GetMethod("GetVulnerability").IsStatic);

            List<Vulnerability> vulnerabilities = new List<Vulnerability>();

            foreach (var type in vulnerabilityTypes)
            {
                MethodInfo getVulnerabilityMethod = type.GetMethod("GetVulnerability");
                if (getVulnerabilityMethod != null && getVulnerabilityMethod.IsStatic)
                {
                    var vulnerability = (Vulnerability)getVulnerabilityMethod.Invoke(null, null);
                    if (vulnerability != null)
                    {
                        vulnerabilities.Add(vulnerability);
                    }
                }
            }

            return vulnerabilities;
        }
    }
}
