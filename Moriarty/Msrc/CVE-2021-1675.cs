using System;
using System.Diagnostics;
using System.Management;
using Microsoft.Win32;
using System.ServiceProcess;

namespace Moriarty.Msrc
{
	internal static class CVE_2021_1675
	{
		private const string name = "CVE-2021-1675";
		private const int OldestPrinterPatch = 5003635; // Update this value as per the specific patch details

		public static void Check(VulnerabilityCollection vulnerabilities)
		{
			Console.WriteLine("Performing Print Spooler vulnerability checks...");

			CheckSpoolerService();
			CheckPatchStatus();
			CheckRegistrySettings();

			vulnerabilities.SetAsVulnerable(name);
		}

		private static void CheckSpoolerService()
		{
			try
			{
				using (ServiceController sc = new ServiceController("Spooler"))
				{
					switch (sc.Status)
					{
						case ServiceControllerStatus.Running:
							Console.WriteLine("Print Spooler service is ENABLED and RUNNING.");
							break;
						case ServiceControllerStatus.Stopped:
							Console.WriteLine("Print Spooler service is ENABLED but STOPPED.");
							break;
						default:
							Console.WriteLine("Print Spooler service status is UNKNOWN.");
							break;
					}
				}
			}
			catch (InvalidOperationException ex)
			{
				Console.WriteLine($"Print Spooler service is not installed: {ex.Message}");
			}
			catch (Exception ex)
			{
				Console.WriteLine($"An error occurred while checking Print Spooler service: {ex.Message}");
			}
		}

		private static void CheckPatchStatus()
		{
			Console.WriteLine("Checking if system has security patches applied...");
			try
			{
				using (var searcher = new ManagementObjectSearcher("root\\CIMV2", "SELECT HotFixID FROM Win32_QuickFixEngineering WHERE Description = 'Security Update'"))
				{
					var patches = searcher.Get();
					var latestPatch = 0;
					foreach (ManagementObject patch in patches)
					{
						var hotFixId = patch["HotFixID"] as string;
						if (int.TryParse(hotFixId?.Substring(2), out var patchNumber) && patchNumber > latestPatch)
						{
							latestPatch = patchNumber;
						}
					}

					Console.WriteLine($"Latest security patch: KB{latestPatch}.");
					if (latestPatch >= OldestPrinterPatch)
					{
						Console.WriteLine("System is PATCHED but might still be vulnerable.");
					}
					else
					{
						Console.WriteLine("System is NOT PATCHED and most likely VULNERABLE!");
					}
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine($"An error occurred while checking for patches: {ex.Message}");
			}
		}

		private static void CheckRegistrySettings()
		{
			Console.WriteLine("Checking registry settings...");

			var keyPath = @"SOFTWARE\Policies\Microsoft\Windows NT\Printers\PointAndPrint";
			using (var key = Registry.LocalMachine.OpenSubKey(keyPath))
			{
				if (key == null)
				{
					Console.WriteLine("Registry setting does not exist. System is likely NOT VULNERABLE.");
					return;
				}

				Console.WriteLine("Registry setting exists!");

				var noWarningNoElevationOnInstall = key.GetValue("NoWarningNoElevationOnInstall", -1);
				var updatePromptSettings = key.GetValue("UpdatePromptSettings", -1);

				Console.WriteLine($"NoWarningNoElevationOnInstall: {noWarningNoElevationOnInstall}");
				Console.WriteLine($"UpdatePromptSettings: {updatePromptSettings}");

				if (noWarningNoElevationOnInstall.Equals(1) || updatePromptSettings.Equals(1))
				{
					Console.WriteLine("System is likely VULNERABLE!");
				}
				else
				{
					Console.WriteLine("System is likely NOT VULNERABLE.");
				}
			}
		}
	}
}
