using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace Moriarty.Msrc
{
    public class CVE_2021_27065 : IVulnerabilityCheck
    {
        private const string Id = "CVE-2021-27065";
        private static readonly string[] Exploits = new[]
        {
            "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-27065"
        };

        public Vulnerability GetVulnerability()
        {
            return new Vulnerability(Id, Exploits);
        }

        public void Check(VulnerabilityCollection vulnerabilities, int buildNumber, List<int> installedKBs)
        {
            DebugUtility.DebugPrint("Running CVE-2021-27065 checks...");

            string exchangeInstallPath = Environment.GetEnvironmentVariable("ExchangeInstallPath");

            if (string.IsNullOrEmpty(exchangeInstallPath))
            {
                DebugUtility.DebugPrint("ExchangeInstallPath environment variable is not set or empty. Cannot proceed with CVE-2021-27065 checks.");
                return;
            }

            string[] logPaths = {
                Path.Combine(exchangeInstallPath, @"V15\Logging\ECP\Server\*.log"),
                Path.Combine(exchangeInstallPath, @"Logging\ECP\Server\*.log")
            };

            string outputPath = Path.Combine(Environment.GetEnvironmentVariable("SystemRoot"), "temp", Environment.MachineName + "-exch", "ECPLogs.txt");
            Directory.CreateDirectory(Path.GetDirectoryName(outputPath));

            bool foundSuspiciousData = false;

            foreach (var logPathPattern in logPaths)
            {
                if (!Directory.Exists(Path.GetDirectoryName(logPathPattern)))
                {
                    continue;
                }

                var logFiles = Directory.GetFiles(Path.GetDirectoryName(logPathPattern), "*.log");
                foreach (var logFile in logFiles)
                {
                    var fileContent = File.ReadAllText(logFile);
                    if (Regex.IsMatch(fileContent, @"Set-.+VirtualDirectory"))
                    {
                        foundSuspiciousData = true;
                        File.AppendAllText(outputPath, fileContent + Environment.NewLine);
                    }
                }
            }

            if (foundSuspiciousData)
            {
                DebugUtility.DebugPrint($"Suspicious Data in ECP Logs. See {outputPath} for details.");
                vulnerabilities.SetAsVulnerable(Id);
            }
            else
            {
                File.WriteAllText(outputPath, "Nothing Suspicious in ECP Logs");
                DebugUtility.DebugPrint("Nothing Suspicious in ECP Logs");
            }
        }
    }
}
